services:
  storage:
    container_name: storage
    image: minio/minio:latest
    hostname: storage
    command: server /data
    restart: always
    expose: 
      - 9000
    environment:
      MINIO_ROOT_USER: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${Storage_Secret:-STORAGE_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - storage-data:/usr/share/storage/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    container_name: createbuckets
    image: minio/mc
    hostname: createbuckets
    depends_on:
      - storage
    restart: on-failure
    entrypoint: > 
      /bin/sh -c "      
      /usr/bin/mc config host add storage http://storage:9000 ${Storage_AccessKey-STORAGE_ACCESS_KEY} ${Storage_Secret-STORAGE_SECRET_KEY} &&
      /usr/bin/mc mb --ignore-existing storage/${Storage_Bucket:-data} &&
      /usr/bin/mc anonymous set download storage/${Storage_Bucket:-data} &&
      exit 0;
      "

  uploader:
    container_name: uploader
    build: ./uploader
    hostname: uploader
    depends_on:
      - storage
      - createbuckets
    expose: 
      - 3000
    environment:
      PORT: 3000
      S3_HOST: storage
      S3_PORT: 9000
      S3_ACCESS_KEY: ${Storage_AccessKey:-STORAGE_ACCESS_KEY}
      S3_ACCESS_SECRET: ${Storage_Secret:-STORAGE_SECRET_KEY}
      S3_BUCKET: ${Storage_Bucket:-STORAGE_BUCKET}
  
  security:
    container_name: security
    build: ./security
    hostname: security
    expose: 
      - 3000
    environment:
      PORT: 3000

  gateway:
    container_name: gateway
    image: nginx:alpine
    hostname: gateway
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:8080"      
    depends_on:
      - storage
      - uploader
      - security

  es-node-01:
    container_name: es-node-01
    image: elasticsearch:${ELK_STACK_VERSION}
    hostname: es-node-01
    volumes:
      - es-data-01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=es-node-01
      - cluster.name=elk-cluster
      - cluster.initial_master_nodes=es-node-01,es-node-02
      - discovery.seed_hosts=es-node-01,es-node-02
      - node.roles=master,data_hot,data_content
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 3s
      timeout: 3s
      retries: 120

  es-node-02:
    depends_on:
      - es-node-01
    container_name: es-node-02
    image: elasticsearch:${ELK_STACK_VERSION}
    hostname: es-node-02
    volumes:
      - es-data-02:/usr/share/elasticsearch/data
    environment:
      - node.name=es-node-02
      - cluster.name=elk-cluster
      - cluster.initial_master_nodes=es-node-01,es-node-02
      - discovery.seed_hosts=es-node-01,es-node-02
      - node.roles=master,data_warm
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 3s
      timeout: 3s
      retries: 120

  kibana:
    depends_on:
      es-node-01:
        condition: service_healthy
      es-node-02:
        condition: service_healthy
    container_name: kibana
    image: kibana:${ELK_STACK_VERSION}
    hostname: kibana
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es-node-01:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 3s
      timeout: 3s
      retries: 120

  vector:
    depends_on:
      es-node-01:
        condition: service_healthy
      es-node-02:
        condition: service_healthy
    container_name: vector
    image: timberio/vector:0.46.0-alpine
    hostname: vector
    user: root
    volumes:
      - ./elk/vector.yaml:/etc/vector/vector.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
    environment:
      - ELASTIC_HOSTS=http://es-node-01:9200

  grafana:
    container_name: grafana
    image: grafana/grafana
    hostname: grafana
    volumes:
      - grafana-data:/usr/share/grafana/data
    ports:
      - ${GRAFANA_PORT}:3000

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    hostname: prometheus
    volumes:
      - prometheus-data:/usr/share/prometheus/data
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
    ports:
      - 9090:9090

volumes:
  storage-data:
    name: storage-data
    driver: local
  es-data-01:
    name: es-data-01
    driver: local
  es-data-02:
    name: es-data-02
    driver: local
  kibana-data:
    name: kibana-data
    driver: local
  grafana-data:
    name: grafana-data
    driver: local
  prometheus-data:
    name: prometheus-data
    driver: local
   